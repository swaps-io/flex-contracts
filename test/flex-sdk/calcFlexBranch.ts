import { expect } from 'chai';
import { Hex } from 'viem';

import { calcFlexBranch, calcFlexBranchHash, calcFlexTree, calcFlexTreeHash } from '../../@swaps-io/flex-sdk';

describe('flex-sdk/calcFlexBranch', function () {
  it('Should not calc branch of tree with 1 mismatching leaf', function () {
    expect(() => {
      calcFlexBranch({
        tree: calcFlexTree({
          leaves: [
            '0x1111111111111111111111111111111111111111111111111111111111111111',
          ],
        }),
        leaf: '0x2222222222222222222222222222222222222222222222222222222222222222',
      });
    }).throws(Error);
  });

  it('Should calc branch of tree with 1 leaf', function () {
    const branch = calcFlexBranch({
      tree: calcFlexTree({
        leaves: [
          '0x1111111111111111111111111111111111111111111111111111111111111111',
        ],
      }),
      leaf: '0x1111111111111111111111111111111111111111111111111111111111111111',
    });
    expect(branch).deep.equal([]);
  });

  it('Should not calc branch of tree with 2 mismatching leaves', function () {
    expect(() => {
      calcFlexBranch({
        tree: calcFlexTree({
          leaves: [
            '0x1111111111111111111111111111111111111111111111111111111111111111',
            '0x2222222222222222222222222222222222222222222222222222222222222222',
          ],
        }),
        leaf: '0x3333333333333333333333333333333333333333333333333333333333333333',
      });
    }).throws(Error);
  });

  it('Should calc branch of tree with 2 leaves', function () {
    const branch = calcFlexBranch({
      tree: calcFlexTree({
        leaves: [
          '0x1111111111111111111111111111111111111111111111111111111111111111',
          '0x2222222222222222222222222222222222222222222222222222222222222222',
        ],
      }),
      leaf: '0x1111111111111111111111111111111111111111111111111111111111111111',
    });
    expect(branch).deep.equal([
      '0x2222222222222222222222222222222222222222222222222222222222222222',
    ]);
  });

  it('Should calc 2nd branch of tree with 2 leaves', function () {
    const branch = calcFlexBranch({
      tree: calcFlexTree({
        leaves: [
          '0x1111111111111111111111111111111111111111111111111111111111111111',
          '0x2222222222222222222222222222222222222222222222222222222222222222',
        ],
      }),
      leaf: '0x2222222222222222222222222222222222222222222222222222222222222222',
    });
    expect(branch).deep.equal([
      '0x1111111111111111111111111111111111111111111111111111111111111111',
    ]);
  });

  it('Should not calc branch of tree with 3 mismatching leaves', function () {
    expect(() => {
      calcFlexBranch({
        tree: calcFlexTree({
          leaves: [
            '0x1111111111111111111111111111111111111111111111111111111111111111',
            '0x2222222222222222222222222222222222222222222222222222222222222222',
            '0x3333333333333333333333333333333333333333333333333333333333333333',
          ],
        }),
        leaf: '0x4444444444444444444444444444444444444444444444444444444444444444',
      });
    }).throws(Error);
  });

  it('Should calc branch of tree with 3 leaves', function () {
    const branch = calcFlexBranch({
      tree: calcFlexTree({
        leaves: [
          '0x1111111111111111111111111111111111111111111111111111111111111111',
          '0x2222222222222222222222222222222222222222222222222222222222222222',
          '0x3333333333333333333333333333333333333333333333333333333333333333',
        ],
      }),
      leaf: '0x1111111111111111111111111111111111111111111111111111111111111111',
    });
    expect(branch).deep.equal([
      '0x2222222222222222222222222222222222222222222222222222222222222222',
      '0x3333333333333333333333333333333333333333333333333333333333333333',
    ]);
  });

  it('Should calc 2nd branch of tree with 3 leaves', function () {
    const branch = calcFlexBranch({
      tree: calcFlexTree({
        leaves: [
          '0x1111111111111111111111111111111111111111111111111111111111111111',
          '0x2222222222222222222222222222222222222222222222222222222222222222',
          '0x3333333333333333333333333333333333333333333333333333333333333333',
        ],
      }),
      leaf: '0x2222222222222222222222222222222222222222222222222222222222222222',
    });
    expect(branch).deep.equal([
      '0x1111111111111111111111111111111111111111111111111111111111111111',
      '0x3333333333333333333333333333333333333333333333333333333333333333',
    ]);
  });

  it('Should calc 3rd branch of tree with 3 leaves', function () {
    const branch = calcFlexBranch({
      tree: calcFlexTree({
        leaves: [
          '0x1111111111111111111111111111111111111111111111111111111111111111',
          '0x2222222222222222222222222222222222222222222222222222222222222222',
          '0x3333333333333333333333333333333333333333333333333333333333333333',
        ],
      }),
      leaf: '0x3333333333333333333333333333333333333333333333333333333333333333',
    });
    expect(branch).deep.equal([
      '0x3e92e0db88d6afea9edc4eedf62fffa4d92bcdfc310dccbe943747fe8302e871',
    ]);
  });

  it('Should calc branch of tree with 7 leaves', function () {
    const branch = calcFlexBranch({
      tree: calcFlexTree({
        leaves: [
          '0x1111111111111111111111111111111111111111111111111111111111111111',
          '0x2222222222222222222222222222222222222222222222222222222222222222',
          '0x3333333333333333333333333333333333333333333333333333333333333333',
          '0x4444444444444444444444444444444444444444444444444444444444444444',
          '0x5555555555555555555555555555555555555555555555555555555555555555',
          '0x6666666666666666666666666666666666666666666666666666666666666666',
          '0x7777777777777777777777777777777777777777777777777777777777777777',
        ],
      }),
      leaf: '0x3333333333333333333333333333333333333333333333333333333333333333',
    });
    expect(branch).deep.equal([
      '0x4444444444444444444444444444444444444444444444444444444444444444',
      '0xee673dead18e0bd840c75d973babf38f2a3527cf5b86621d5ed7a30b62d247c7',
      '0xa66456f46c4e6e9c788dbeac5963cc72bdb924c97324d99c55988193e65e92fe',
    ]);
  });

  it('Should calc every branch of tree with 11 leaves', function () {
    const leaves: Hex[] = [
      '0x1111111111111111111111111111111111111111111111111111111111111111',
      '0x2222222222222222222222222222222222222222222222222222222222222222',
      '0x3333333333333333333333333333333333333333333333333333333333333333',
      '0x4444444444444444444444444444444444444444444444444444444444444444',
      '0x5555555555555555555555555555555555555555555555555555555555555555',
      '0x6666666666666666666666666666666666666666666666666666666666666666',
      '0x7777777777777777777777777777777777777777777777777777777777777777',
      '0x8888888888888888888888888888888888888888888888888888888888888888',
      '0x9999999999999999999999999999999999999999999999999999999999999999',
      '0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA',
      '0xBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB',
    ];

    const tree = calcFlexTree({ leaves });

    const treeHash = calcFlexTreeHash({ tree });

    for (const leaf of leaves) {
      const branch = calcFlexBranch({ tree, leaf });
      const branchHash = calcFlexBranchHash({ leaf, branch });
      expect(branchHash).equal(treeHash);
    }
  });
});
